---
subtitle: Einfache Rasterdaten
---

# Übung 3 {#sec-uebung-3}

## Vorbereitung <!--2-->

Installiere zudem das R Package `terra`

Erstelle dann ein neues R Script mit dem Namen `Uebung_3.R` und lade darin die libraries `sf` sowie `tmap`.


```{r}
#| label: uebung-3-1
#| output: false

library("sf")
library("tmap")
```



## Übung 3.1 <!--10-->

- Such das digitale Höhenmodell der Schweiz (200m Auflösung)
- Auch hier kannst du die folgenden Adressen nutzen:
  - [opendata.swiss](https://opendata.swiss/)
  - [map.geo.admin.ch](https://map.geo.admin.ch)
  - [swisstopo.admin.ch](https://www.swisstopo.admin.ch)
- Entzippe ein allfälliges Zip-File und schau dir den Inhalt an
- Öffne das Tif-File in QGIS

::::{.content-visible when-profile="musterloesung"}
:::{.callout-note}
## Musterlösung


- {{< var datasets.dhm25200.url >}}
- Shortlink (für diesen Kurs): {{< var datasets.dhm25200.shorturl >}}


:::
::::



## Input: Raster Datenformate  <!--4-->



Inhalt des heruntergeladenen zip-Files:


- Eigentliche Daten:
  - DHM200_polyface.dxf
  - DHM200.asc
  - DHM200.xyz
- Metadaten und Lizenzbedigungen:
  - license.txt
  - Metadata_gm03.xml
  - Metadata_PDF.pdf
  - Metadata_xml_iso19139.xml


Der gleiche Datensatz (`DHM25 200`) in 3 unterschiedlichen Datenformaten:

- DHM200.asc
- DHM200.xyz
- ~~DHM200_polyface.dxf~~ (← CAD bereich)


:::{.callout-note collapse="true"}

## ESRI ArcInfo ASCII Grid  <!--1-->

- Dateierweiterung \*.asc
- ein Datenformat von ESRI (siehe die [Spezifikationen](http://old.geotools.org/ArcInfo-ASCII-Grid-format_5250.html))
- beginnt mit mehreren Zeilen Metaadaten, darauf folgen die eigentlichen Werte
- kann in einem Texteditor geöffnet werden:

```{.default}
NCOLS 1926
NROWS 1201
XLLCORNER 479900.
YLLCORNER 61900.
CELLSIZE 200.
NODATA_VALUE -9999.
-9999. -9999. -9999. -9999. -9999. -9999. -9999. -9999. -9999. -9999. -9999.
...
...
...
835.415 863.55 887.424 869.213 855.539 845.878 829.714 815.258 807.458 799.816
```

:::


:::{.callout-note collapse="true"}

## ASCII Gridded XYZ  <!--1-->

- Dateierweiterung \*.xyz
- Ein offenes Format
- Beinhaltet 3 Spalten: x- und y- Koordinaten sowie Zellwert
- kann in einem Texteditor geöffnet werden:

```{.default}
655000.00 302000.00 835.01
655200.00 302000.00 833.11
655400.00 302000.00 831.20
```

:::


### Raster in `R`

Um Rasterdaten in R zu importieren verwenden wir das Package `terra`.

```{r}
#| label: uebung-3-3
#| eval: false

install.packages("terra")
```


```{r}
#| label: uebung-3-4

library("terra")

dhm200 <- rast("data-original/dhm25_200/DHM200.xyz")
```

- Aus `terra` benötigen wir die Funktion `rast`
- das Importieren funktioniert gleich, unabhängig von der Dateierweiterung
- eine summarische Zusammenfassung erhält man via Konsole:

```{r}
#| label: uebung-3-5

dhm200

plot(dhm200)  # für einfache visualisierungen

```



## Übung 3.2 <!--3-->

In welchem Koordinatensystem befindet sich dieses Höhenmodell? 

Tipp: Konsultiere die Metadaten!

::::{.content-visible when-profile="musterloesung"}
:::{.callout-note}
## Musterlösung

![](images/ref.png)

→ im alten Schweizer Koordinatensystem CH1903 LV03



:::
::::

## Übung 3.2 <!--3-->

Wie hoch ist die Auflösung?

## Lösung

![](images/res.png)

→ 200 Meter



## Übung 3.3 <!--3-->

Importiere `DHM200` in R und schau dir das Objekt in der Konsole sowie mit `plot()` an.

::::{.content-visible when-profile="musterloesung"}
:::{.callout-note}
## Musterlösung

```{r}
#| label: uebung-3-8
dhm200 <- rast("data-original/dhm25_200/DHM200.xyz")
dhm200
plot(dhm200)
```


:::
::::

## Input: Koordinatenbezugssystem *festlegen*



- Das Koordinatenbezugssystem haben wir bereits für Vektordaten festgelegt
- dabei haben wir folgenden Befehl verwendet: 
- `st_crs(meinvektordatensatz) <- 21781` (&larr; für das alte Schweizer Koordinatenbezugssystem)
- für Rasterdaten funktioniert es leicht anders:

```{r}
#| label: uebung-3-9

crs(dhm200) <- "epsg: 21781"
```

- `crs()` statt `st_crs`
- `"epsg: 21781"` (mit Anführungs- und Schlusszeichen) statt `21781`




```{r}
#| label: uebung-3-10

dhm200
```



## Input: Koordinatenbezugssystem *transformieren*

- Koordinatenbezugssystem von `dhm200`: `CH1903 LV03` bzw. `EPSG: 21781`
- Analog Vektordaten: in das *neue* Schweizer Koordinatenbezugssytem transformieren
- Vektordaten: Funktion `st_transform`
- Rasterdaten: Funktion `project`

```{r}
#| label: uebung-3-11

dhm200_2056 <- project(dhm200, "epsg: 2056")
```



```{r}
#| label: uebung-3-12

dhm200
```

```{r}
#| label: uebung-3-13

dhm200_2056
```



## Übung 3.4 <!--4-->

- Transformiere `dhm200` in das Koordinatenbezugssystem `CH1903+ LV95`
- Speichere den Output als `dhm200_2056`

::::{.content-visible when-profile="musterloesung"}
:::{.callout-note}
## Musterlösung

```{r}
#| label: uebung-3-14
dhm200_2056 <- project(dhm200, "epsg: 2056")
```



:::
::::

## Input Raster exportieren<!--3-->

- Wir haben das DHM auf unsere Bedürfnisse angepasst (CRS gesetzt und transformiert)
- Wir können unser verändertes Objekt (`dhm200_2056`) als GeoTiff exportieren, so dass diese Änderungen abgespeichert werden

```{r}
#| label: uebung-3-18

#| eval: false
#| 
writeRaster(dhm200_2056,"data-processed/dhm200_2056.tif", overwrite = TRUE)
```

- beim Import ist die CRS Information bekannt (CRS setzen und transformieren ist nicht mehr nötig)


```{r}
#| label: uebung-3-19

dhm200_2056 <- rast("data-processed/dhm200_2056.tif")

dhm200_2056
```





## Übung 3.5 <!--4-->

Visualisiere `dhm200_2056` mit `tmap`.

Tipp: Um ein Polygon zu visualisieren sind wir wie folgt vorgegangen

```{r}
#| label: uebung-3-15
#| eval: false

tm_shape(gemeindegrenzen) + tm_polygons()
```


::::{.content-visible when-profile="musterloesung"}
:::{.callout-note}
## Musterlösung


```{r}
#| label: uebung-3-16
#| 
# tmap_mode("view") # optional
tm_shape(dhm200_2056) + 
  tm_raster()
```



:::
::::


## Übung 3.6 <!--4-->

Verändere die Darstellungsweise des Rasters mithilfe von `style` und `palette`. Tipp, schau dir die Hilfe von `?tm_raster` an.

::::{.content-visible when-profile="musterloesung"}
:::{.callout-note}
## Musterlösung

```{r}
#| label: uebung-3-17
tm_shape(dhm200_2056) + tm_raster(style = "cont", palette = "viridis")
```



:::
::::



:::{.callout-note}
## Rückblick

Wir haben...

- ein Höhenmodell der Schweiz heruntergeladen
- 3 unterschiedliche Datenformaten von Rasterdaten kennengelernt
- ein Rasterdatensatz mithilfe von `rast` aus `terra` in R importiert
- diesem Rasterdatensatz das korrekte Koordinatenbezugssystem zugewiesen (`crs`)
- diesen Rasterdatensatz in ein anderes Koordinatensystem transformiert (`project`)
- diesen Rasterdatensatz mit `plot()` sowie `tmap` visualisert
- mit verschiedenen Darstellungformen in `tmap` gearbeitet (optionen `style` und `palette`)
- DHM: *ein* Wert pro Zelle. Es gibt aber Situationen, wo wir mehreren Werten pro Zelle benötigen

:::


