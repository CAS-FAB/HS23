---
subtitle: Komplexe Rasterdaten
---

# Übung 4

- Satelliten und Drohnen nehmen meist verschiedene Spektren von Elektromagnetischen Wellen auf
- diese Spektren werden in unterschiedlichen Datensätzen abgespeichert
- diese Datensätze müssen wieder zusammengefügt werden um ein Gesamtbild zu erhalten
- Beispiel: Rot, Grün und Blau werte fügen sich zu einem Farbluftbild zusammen




![](images/RGBSTack_1.jpg)






## Übung 4.1 <!-- 3-->


- Ladet euch einen Ausschnitt aus dem Datensatz `swissimage 10` von Swisstopo herunter: <https://www.swisstopo.admin.ch/de/geodata/images/ortho/swissimage10.html>
- Shortlink: <https://bit.ly/40Fy0Wj>
- Enzipped den Inhalt in euer RStudio Projekt und schaut den Inhalt an
- Was ist das Koordinatenbezugssystem? Wie hoch ist die räumliche Auflösung?


::::{.content-visible when-profile="musterloesung"}
:::{.callout-note}
## Musterlösung

1. Koordinatenbezugssystem: EPSG 2056
2. räumliche Auflösung: 10cm oder 2m verfügbar


:::
::::


## Übung 4.2 <!-- 3-->



- Erstelle ein neues R Script mit dem Namen `Uebung_4.R` 
- Lade die libraries `sf`, `tmap` und `terra`. 
- Importiere den Swissimage Datensatz 
- Weise dem importierten Datensatz das Korrekte Koordinatenbezugssystem zu
- Schau dir den Datensatz in der Konsole sowie mit `plot()` an

::::{.content-visible when-profile="musterloesung"}
:::{.callout-note}
## Musterlösung

```{r}
#| label: uebung-4-2
#| output: false
#| filename: Musterlösung
library("sf")
library("tmap")
library("terra")

swissimage <- rast("data/original/swissimage25/SWISSIMAGE25m/SI25-2012-2013-2014.tif")

crs(swissimage) <- "epsg: 2056"

```

:::
::::




```{r}
#| label: uebung-4-3

plot(swissimage)
```




```{r}
#| label: uebung-4-4

swissimage
```



## Input: RGB Plots mit `tmap`

- Um ein `rgb` Datensatz mit `tmap` zu plotten, verwenden wir nicht mehr `tm_raster()` sondern `tm_rgb`

```{r}
#| label: uebung-4-5

tmap_mode("plot")
```


```{r}
#| label: uebung-4-6

swissimage_10 <- aggregate(swissimage, fact = 10)

tm_shape(swissimage_10) + 
  tm_rgb()
```








## Input

- Heute haben wir das Höhenmodell `dhm200` importiert
- Höhenmodell mit 200m Auflösung (&rarr; grob! )
- swisstopo stellt zusätzlich das [`dhm25`](https://www.swisstopo.admin.ch/de/geodata/height/dhm25.html) mit 25m Auflösung zur Verfügung (https://bit.ly/3kFgZrF)
- durch die höhere Auflösung dauert das transformieren in ein neues Koordinatensystem etwas länger




## Übung 4.4

- Ladet euch das das [`dhm25`](https://www.swisstopo.admin.ch/de/geodata/height/dhm25.html) mit 25m Auflösung herunter (https://bit.ly/3kFgZrF)
- importiert es in R
- setzt das korrekte CRS
- transformiert es in EPSG 2056 und verwendet dabei folgende Optionen: 
  - mit `filename =` den Output direkt in ein File speichern
  - mit `progress = TRUE` den Fortschritt anzeigen lassen
- visualisiert es mit `tmap`

```{r}
#| label: uebung-4-10
#| filename: Musterlösung
dhm25 <- rast("data/original/DHM25_MM_ASCII_GRID/ASCII_GRID_1part/dhm25_grid_raster.asc")
crs(dhm25) <- "epsg: 21781"

dhm25

#terra::project(dhm25, "epsg: 2056", filename = "data/dhm25_2056.tif", progress = TRUE)
```




## Übung 4.5 (Optional und Open End)

Suche dir auf den gängigen Portalen (s.u.) einen spannenden Datensatz und visualisiere diesen
  - [opendata.swiss](https://opendata.swiss/)
  - [map.geo.admin.ch](https://map.geo.admin.ch)
  - [swisstopo.admin.ch](https://www.swisstopo.admin.ch)
  


## Übung 4.6 (Optional und Open End)

- Lade dir swissimage daten in der Auflösung von 2m herunter und importiere sie in `R`
- Achtung! Sehr anspruchsvoll!!
- Tipps: du brauchst dazu:
  - `list.files()`
  - `lapply`
  - `do.call`
  - `mosaic`





```{r}
#| label: uebung-4-11
#| eval: false
#| filename: Musterlösung

# Daten herunterladen:

links <- read.csv("data/original/swissimage_2m_landquart/swissimage_2m_urls.csv",header = FALSE)

links <- links$V1

filenames <- basename(links)

for (i in seq_along(links)) {
  download.file(links[i], file.path("data/original/swissimage_2m_landquart/", filenames[i]))
}

# Daten importieren:

swissimage_paths <- list.files("data/original/swissimage_2m_landquart",full.names = TRUE)

swissimage_list <- lapply(swissimage_paths, function(x){rast(x)})

swiss_mosaic <- do.call(terra::mosaic, swissimage_list)

writeRaster(swiss_mosaic, "data/processed/swissimage_2m_landquart.tif", overwrite = TRUE)

```


<!-- hier weiterfahren -->

exclude: true

## Übung 4.7 



```{r}
#| label: uebung-4-12

tww_landquart <- read_sf("data/processed/tww_landquart.gpkg")

swissimage <- terra::rast("data/processed/swissimage_2m_landquart.tif")

tm_shape(swissimage) +
  tm_rgb() +
  tm_shape(tww_landquart, is.master = TRUE) +
  tm_polygons() +
  tm_scale_bar(position = c(1,0), just = c(1,0),bg.color = "white")
```


