{
  "hash": "dd2b5c3c50bc07b7473594a80201f9a5",
  "result": {
    "engine": "knitr",
    "markdown": "---\nsubtitle: Komplexe Rasterdaten\n---\n\n\n# Übung 4 {#sec-uebung-4}\n\n- Satelliten und Drohnen nehmen meist verschiedene Spektren von Elektromagnetischen Wellen auf\n- diese Spektren werden in unterschiedlichen Datensätzen abgespeichert\n- diese Datensätze müssen wieder zusammengefügt werden um ein Gesamtbild zu erhalten\n- Beispiel: Rot, Grün und Blau werte fügen sich zu einem Farbluftbild zusammen\n\n\n\n\n![](images/RGBSTack_1.jpg)\n\n\n\n\n\n\n## Übung 4.1 <!-- 3-->\n\n\n- Ladet euch einen Ausschnitt aus dem Datensatz `swissimage 10` von Swisstopo herunter: <https://www.swisstopo.admin.ch/de/geodata/images/ortho/swissimage10.html>\n- Shortlink: <https://bit.ly/40Fy0Wj>\n- Enzipped den Inhalt in euer RStudio Projekt und schaut den Inhalt an\n- Was ist das Koordinatenbezugssystem? Wie hoch ist die räumliche Auflösung?\n\n\n::::{.content-visible when-profile=\"musterloesung\"}\n:::{.callout-note}\n## Musterlösung\n\n1. Koordinatenbezugssystem: EPSG 2056\n2. räumliche Auflösung: 10cm oder 2m verfügbar\n\n\n:::\n::::\n\n\n## Übung 4.2 <!-- 3-->\n\n\n\n- Erstelle ein neues R Script mit dem Namen `Uebung_4.R` \n- Lade die libraries `sf`, `tmap` und `terra`. \n- Importiere den Swissimage Datensatz \n- Weise dem importierten Datensatz das Korrekte Koordinatenbezugssystem zu\n- Schau dir den Datensatz in der Konsole sowie mit `plot()` an\n\n::::{.content-visible when-profile=\"musterloesung\"}\n:::{.callout-note}\n## Musterlösung\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"sf\")\nlibrary(\"tmap\")\nlibrary(\"terra\")\n\nswissimage <- rast(\"data/original/swissimage25/SWISSIMAGE25m/SI25-2012-2013-2014.tif\")\n\ncrs(swissimage) <- \"epsg: 2056\"\n```\n:::\n\n\n:::\n::::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(swissimage)\n```\n\n::: {.cell-output-display}\n![](uebung_4_files/figure-html/uebung-4-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nswissimage\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 9480, 14000, 3  (nrow, ncol, nlyr)\nresolution  : 25, 25  (x, y)\nextent      : 2484375, 2834375, 1062000, 1299000  (xmin, xmax, ymin, ymax)\ncoord. ref. : CH1903+ / LV95 (EPSG:2056) \nsource      : SI25-2012-2013-2014.tif \ncolors RGB  : 1, 2, 3 \nnames       : SI25-2012-2013-2014_1, SI25-2012-2013-2014_2, SI25-2012-2013-2014_3 \n```\n\n\n:::\n:::\n\n\n\n\n## Input: RGB Plots mit `tmap`\n\n- Um ein `rgb` Datensatz mit `tmap` zu plotten, verwenden wir nicht mehr `tm_raster()` sondern `tm_rgb`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nswissimage_10 <- aggregate(swissimage, fact = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n|---------|---------|---------|---------|\n=========================================\n                                          \n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(swissimage_10) + \n  tm_rgb()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nstars object downsampled to 1215 by 823 cells. See tm_shape manual (argument raster.downsample)\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](uebung_4_files/figure-html/uebung-4-6-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n## Input\n\n- Heute haben wir das Höhenmodell `dhm200` importiert\n- Höhenmodell mit 200m Auflösung (&rarr; grob! )\n- swisstopo stellt zusätzlich das [`dhm25`](https://www.swisstopo.admin.ch/de/geodata/height/dhm25.html) mit 25m Auflösung zur Verfügung (https://bit.ly/3kFgZrF)\n- durch die höhere Auflösung dauert das transformieren in ein neues Koordinatensystem etwas länger\n\n\n\n\n## Übung 4.4\n\n- Ladet euch das das [`dhm25`](https://www.swisstopo.admin.ch/de/geodata/height/dhm25.html) mit 25m Auflösung herunter (https://bit.ly/3kFgZrF)\n- importiert es in R\n- setzt das korrekte CRS\n- transformiert es in EPSG 2056 und verwendet dabei folgende Optionen: \n  - mit `filename =` den Output direkt in ein File speichern\n  - mit `progress = TRUE` den Fortschritt anzeigen lassen\n- visualisiert es mit `tmap`\n\n::::{.content-visible when-profile=\"musterloesung\"}\n:::{.callout-note}\n## Musterlösung\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndhm25 <- rast(\"data/original/DHM25_MM_ASCII_GRID/ASCII_GRID_1part/dhm25_grid_raster.asc\")\ncrs(dhm25) <- \"epsg: 21781\"\n\ndhm25\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 9121, 15401, 1  (nrow, ncol, nlyr)\nresolution  : 25, 25  (x, y)\nextent      : 479987.5, 865012.5, 73987.5, 302012.5  (xmin, xmax, ymin, ymax)\ncoord. ref. : CH1903 / LV03 (EPSG:21781) \nsource      : dhm25_grid_raster.asc \nname        : dhm25_grid_raster \nmin value   :               193 \nmax value   :              4629 \n```\n\n\n:::\n\n```{.r .cell-code}\n#terra::project(dhm25, \"epsg: 2056\", filename = \"data/dhm25_2056.tif\", progress = TRUE)\n```\n:::\n\n\n\n\n\n:::\n::::\n\n## Übung 4.5 (Optional und Open End)\n\nSuche dir auf den gängigen Portalen (s.u.) einen spannenden Datensatz und visualisiere diesen\n  - [opendata.swiss](https://opendata.swiss/)\n  - [map.geo.admin.ch](https://map.geo.admin.ch)\n  - [swisstopo.admin.ch](https://www.swisstopo.admin.ch)\n  \n\n\n## Übung 4.6 (Optional und Open End)\n\n- Lade dir swissimage daten in der Auflösung von 2m herunter und importiere sie in `R`\n- Achtung! Sehr anspruchsvoll!!\n- Tipps: du brauchst dazu:\n  - `list.files()`\n  - `lapply`\n  - `do.call`\n  - `mosaic`\n\n\n\n\n\n::::{.content-visible when-profile=\"musterloesung\"}\n:::{.callout-note}\n## Musterlösung\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Daten herunterladen:\n\nlinks <- read.csv(\"data/original/swissimage_2m_landquart/swissimage_2m_urls.csv\",header = FALSE)\n\nlinks <- links$V1\n\nfilenames <- basename(links)\n\nfor (i in seq_along(links)) {\n  download.file(links[i], file.path(\"data/original/swissimage_2m_landquart/\", filenames[i]))\n}\n\n# Daten importieren:\n\nswissimage_paths <- list.files(\"data/original/swissimage_2m_landquart\",full.names = TRUE)\n\nswissimage_list <- lapply(swissimage_paths, function(x){rast(x)})\n\nswiss_mosaic <- do.call(terra::mosaic, swissimage_list)\n\nwriteRaster(swiss_mosaic, \"data/processed/swissimage_2m_landquart.tif\", overwrite = TRUE)\n```\n:::\n\n\n\n\n:::\n::::\n\n\n## Übung 4.7 \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntww_landquart <- read_sf(\"data/processed/tww_landquart.gpkg\")\n\nswissimage <- terra::rast(\"data/processed/swissimage_2m_landquart.tif\")\n\ntm_shape(swissimage) +\n  tm_rgb() +\n  tm_shape(tww_landquart, is.master = TRUE) +\n  tm_polygons() +\n  tm_scale_bar(position = c(1,0), just = c(1,0),bg.color = \"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nstars object downsampled to 1000 by 1000 cells. See tm_shape manual (argument raster.downsample)\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](uebung_4_files/figure-html/uebung-4-12-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "uebung_4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}