{
  "hash": "d7dcbf7a9f26077441850495711b7c4b",
  "result": {
    "engine": "knitr",
    "markdown": "---\nsubtitle: Einfache Rasterdaten\n---\n\n\n# Übung 3 {#sec-uebung-3}\n\n## Vorbereitung <!--2-->\n\nInstalliere zudem das R Package `terra`\n\nErstelle dann ein neues R Script mit dem Namen `Uebung_3.R` und lade darin die libraries `sf` sowie `tmap`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"sf\")\nlibrary(\"tmap\")\n```\n:::\n\n\n\n\n## Übung 3.1 <!--10-->\n\n- Such das digitale Höhenmodell der Schweiz (200m Auflösung)\n- Auch hier kannst du die folgenden Adressen nutzen:\n  - [opendata.swiss](https://opendata.swiss/)\n  - [map.geo.admin.ch](https://map.geo.admin.ch)\n  - [swisstopo.admin.ch](https://www.swisstopo.admin.ch)\n- Entzippe das File (sofern nötig) und schau dir den Inhalt an\n\n\n::::{.content-visible when-profile=\"musterloesung\"}\n:::{.callout-note}\n## Musterlösung\n\n- <https://www.swisstopo.admin.ch/de/geodata/height/dhm25200.html>\n- Shortlink (für diesen Kurs): <https://bit.ly/3Hj4X0K>\n\n\n:::\n::::\n\n\n\n## Input: Raster Datenformate  <!--4-->\n\n\n\nInhalt des heruntergeladenen zip-Files:\n\n\n- Eigentliche Daten:\n  - DHM200_polyface.dxf\n  - DHM200.asc\n  - DHM200.xyz\n- Metadaten und Lizenzbedigungen:\n  - license.txt\n  - Metadata_gm03.xml\n  - Metadata_PDF.pdf\n  - Metadata_xml_iso19139.xml\n\n\nDer gleiche Datensatz (`DHM25 200`) in 3 unterschiedlichen Datenformaten:\n\n- DHM200.asc\n- DHM200.xyz\n- ~~DHM200_polyface.dxf~~ (← CAD bereich)\n\n\n:::{.callout-note collapse=\"true\"}\n\n## ESRI ArcInfo ASCII Grid  <!--1-->\n\n- Dateierweiterung \\*.asc\n- ein Datenformat von ESRI (siehe die [Spezifikationen](http://old.geotools.org/ArcInfo-ASCII-Grid-format_5250.html))\n- beginnt mit mehreren Zeilen Metaadaten, darauf folgen die eigentlichen Werte\n- kann in einem Texteditor geöffnet werden:\n\n```{.default}\nNCOLS 1926\nNROWS 1201\nXLLCORNER 479900.\nYLLCORNER 61900.\nCELLSIZE 200.\nNODATA_VALUE -9999.\n-9999. -9999. -9999. -9999. -9999. -9999. -9999. -9999. -9999. -9999. -9999. -9999. \n...\n...\n...\n835.415 863.55 887.424 869.213 855.539 845.878 829.714 815.258 807.458 799.816 799.2  \n```\n\n:::\n\n\n:::{.callout-note collapse=\"true\"}\n\n## ASCII Gridded XYZ  <!--1-->\n\n- Dateierweiterung \\*.xyz\n- Ein offenes Format\n- Beinhaltet 3 Spalten: x- und y- Koordinaten sowie Zellwert\n- kann in einem Texteditor geöffnet werden:\n\n```{.default}\n655000.00 302000.00 835.01\n655200.00 302000.00 833.11\n655400.00 302000.00 831.20\n```\n\n:::\n\n\n### Raster in `R`\n\nUm Rasterdaten in R zu importieren verwenden wir das Package `terra`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"terra\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"terra\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nterra 1.7.39\n```\n\n\n:::\n\n```{.r .cell-code}\ndhm200 <- rast(\"data/original/dhm25_200/DHM200.xyz\")\n```\n:::\n\n\n- Aus `terra` benötigen wir die Funktion `rast`\n- das Importieren funktioniert gleich, unabhängig von der Dateierweiterung\n- eine summarische Zusammenfassung erhält man via Konsole:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndhm200\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 1141, 1926, 1  (nrow, ncol, nlyr)\nresolution  : 200, 200  (x, y)\nextent      : 479900, 865100, 73900, 302100  (xmin, xmax, ymin, ymax)\ncoord. ref. :  \nsource      : DHM200.xyz \nname        :  DHM200 \nmin value   :  193.00 \nmax value   : 4556.63 \n```\n\n\n:::\n\n```{.r .cell-code}\nplot(dhm200)  # für einfache visualisierungen\n```\n\n::: {.cell-output-display}\n![](uebung_3_files/figure-html/uebung-3-5-1.png){width=672}\n:::\n:::\n\n\n\n\n## Übung 3.2 <!--3-->\n\nIn welchem Koordinatensystem befindet sich dieses Höhenmodell? \n\nTipp: Konsultiere die Metadaten!\n\n::::{.content-visible when-profile=\"musterloesung\"}\n:::{.callout-note}\n## Musterlösung\n\n![](images/ref.png)\n\n→ im alten Schweizer Koordinatensystem CH1903 LV03\n\n\n\n:::\n::::\n\n## Übung 3.2 <!--3-->\n\nWie hoch ist die Auflösung?\n\n## Lösung\n\n![](images/res.png)\n\n→ 200 Meter\n\n\n\n## Übung 3.3 <!--3-->\n\nImportiere `DHM200` in R und schau dir das Objekt in der Konsole sowie mit `plot()` an.\n\n::::{.content-visible when-profile=\"musterloesung\"}\n:::{.callout-note}\n## Musterlösung\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndhm200 <- rast(\"data/original/dhm25_200/DHM200.xyz\")\ndhm200\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 1141, 1926, 1  (nrow, ncol, nlyr)\nresolution  : 200, 200  (x, y)\nextent      : 479900, 865100, 73900, 302100  (xmin, xmax, ymin, ymax)\ncoord. ref. :  \nsource      : DHM200.xyz \nname        :  DHM200 \nmin value   :  193.00 \nmax value   : 4556.63 \n```\n\n\n:::\n\n```{.r .cell-code}\nplot(dhm200)\n```\n\n::: {.cell-output-display}\n![](uebung_3_files/figure-html/uebung-3-8-1.png){width=672}\n:::\n:::\n\n\n\n:::\n::::\n\n## Input: Koordinatenbezugssystem *festlegen*\n\n\n\n- Das Koordinatenbezugssystem haben wir bereits für Vektordaten festgelegt\n- dabei haben wir folgenden Befehl verwendet: \n- `st_crs(meinvektordatensatz) <- 21781` (&larr; für das alte Schweizer Koordinatenbezugssystem)\n- für Rasterdaten funktioniert es leicht anders:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrs(dhm200) <- \"epsg: 21781\"\n```\n:::\n\n\n- `crs()` statt `st_crs`\n- `\"epsg: 21781\"` (mit Anführungs- und Schlusszeichen) statt `21781`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndhm200\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 1141, 1926, 1  (nrow, ncol, nlyr)\nresolution  : 200, 200  (x, y)\nextent      : 479900, 865100, 73900, 302100  (xmin, xmax, ymin, ymax)\ncoord. ref. : CH1903 / LV03 (EPSG:21781) \nsource      : DHM200.xyz \nname        :  DHM200 \nmin value   :  193.00 \nmax value   : 4556.63 \n```\n\n\n:::\n:::\n\n\n\n\n## Input: Koordinatenbezugssystem *transformieren*\n\n- Koordinatenbezugssystem von `dhm200`: `CH1903 LV03` bzw. `EPSG: 21781`\n- Analog Vektordaten: in das *neue* Schweizer Koordinatenbezugssytem transformieren\n- Vektordaten: Funktion `st_transform`\n- Rasterdaten: Funktion `project`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndhm200_2056 <- project(dhm200, \"epsg: 2056\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndhm200\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 1141, 1926, 1  (nrow, ncol, nlyr)\nresolution  : 200, 200  (x, y)\nextent      : 479900, 865100, 73900, 302100  (xmin, xmax, ymin, ymax)\ncoord. ref. : CH1903 / LV03 (EPSG:21781) \nsource      : DHM200.xyz \nname        :  DHM200 \nmin value   :  193.00 \nmax value   : 4556.63 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndhm200_2056\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 1141, 1926, 1  (nrow, ncol, nlyr)\nresolution  : 200, 200  (x, y)\nextent      : 2479900, 2865100, 1073900, 1302100  (xmin, xmax, ymin, ymax)\ncoord. ref. : CH1903+ / LV95 (EPSG:2056) \nsource(s)   : memory\nname        :   DHM200 \nmin value   :  193.000 \nmax value   : 4555.624 \n```\n\n\n:::\n:::\n\n\n\n\n## Übung 3.4 <!--4-->\n\n- Transformiere `dhm200` in das Koordinatenbezugssystem `CH1903+ LV95`\n- Speichere den Output als `dhm200_2056`\n\n::::{.content-visible when-profile=\"musterloesung\"}\n:::{.callout-note}\n## Musterlösung\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndhm200_2056 <- project(dhm200, \"epsg: 2056\")\n```\n:::\n\n\n\n\n:::\n::::\n\n\n\n\n## Übung 3.5 <!--4-->\n\nVisualisiere `dhm200_2056` mit `tmap`.\n\nTipp: Um ein Polygon zu visualisieren sind wir wie folgt vorgegangen\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(gemeindegrenzen) + tm_polygons()\n```\n:::\n\n\n\n::::{.content-visible when-profile=\"musterloesung\"}\n:::{.callout-note}\n## Musterlösung\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tmap_mode(\"view\") # optional\ntm_shape(dhm200_2056) + tm_raster()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nstars object downsampled to 1299 by 770 cells. See tm_shape manual (argument raster.downsample)\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](uebung_3_files/figure-html/uebung-3-16-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n::::\n\n\n## Übung 3.6 <!--4-->\n\nVerändere die Darstellungsweise des Rasters mithilfe von `style` und `palette`. Tipp, schau dir die Hilfe von `?tm_raster` an.\n\n::::{.content-visible when-profile=\"musterloesung\"}\n:::{.callout-note}\n## Musterlösung\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(dhm200_2056) + tm_raster(style = \"cont\", palette = \"viridis\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nstars object downsampled to 1299 by 770 cells. See tm_shape manual (argument raster.downsample)\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](uebung_3_files/figure-html/uebung-3-17-1.png){width=672}\n:::\n:::\n\n\n\n\n:::\n::::\n\n## Input Raster exportieren<!--3-->\n\n- Wir haben das DHM auf unsere Bedürfnisse angepasst (CRS gesetzt und transformiert)\n- Wir können unser verändertes Objekt (`dhm200_2056`) exportieren, so dass diese Änderungen abgespeichert werden\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| eval: false\n#| \nwriteRaster(dhm200_2056,\"data/processed/dhm200_2056.tif\", overwrite = TRUE)\n```\n:::\n\n\n- beim Import ist die CRS Information bekannt (CRS setzen und transformieren ist nicht mehr nötig)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndhm200_2056 <- rast(\"data/processed/dhm200_2056.tif\")\n\ndhm200_2056\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 1141, 1926, 1  (nrow, ncol, nlyr)\nresolution  : 200, 200  (x, y)\nextent      : 2479900, 2865100, 1073900, 1302100  (xmin, xmax, ymin, ymax)\ncoord. ref. : CH1903+ / LV95 (EPSG:2056) \nsource      : dhm200_2056.tif \nname        :   DHM200 \nmin value   :  193.000 \nmax value   : 4555.624 \n```\n\n\n:::\n:::\n\n\n\n\n## Übung 3.7 <!--4-->\n\nExportiere `dhm200_2056` als `tif` File\n\n::::{.content-visible when-profile=\"musterloesung\"}\n:::{.callout-note}\n## Musterlösung\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwriteRaster(dhm200_2056,\"data/processed/dhm200_2056.tif\")\n```\n:::\n\n\n\n:::\n::::\n\n\n:::{.callout-note}\n## Rückblick\n\nWir haben...\n\n- ein Höhenmodell der Schweiz heruntergeladen\n- 3 unterschiedliche Datenformaten von Rasterdaten kennengelernt\n- ein Rasterdatensatz mithilfe von `rast` aus `terra` in R importiert\n- diesem Rasterdatensatz das korrekte Koordinatenbezugssystem zugewiesen (`crs`)\n- diesen Rasterdatensatz in ein anderes Koordinatensystem transformiert (`project`)\n- diesen Rasterdatensatz mit `plot()` sowie `tmap` visualisert\n- mit verschiedenen Darstellungformen in `tmap` gearbeitet (optionen `style` und `palette`)\n- DHM: *ein* Wert pro Zelle. Es gibt aber Situationen, wo wir mehreren Werten pro Zelle benötigen\n\n:::\n\n\n",
    "supporting": [
      "uebung_3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}